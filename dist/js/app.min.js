/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports) {

	$(document).ready(function () {
	
		'use strict';
	
		var menuItem = $('.menu-item');
		var container = $('.content-container');
		var formInput = $('.form input, .form textarea');
		var inputLength = $('.input-length .text');
	
		// Menu
		menuItem.click(function () {
			var thisForm = $('.content-' + $(this).text().toLowerCase());
	
			menuItem.removeClass('is--active');
			$(this).addClass('is--active');
	
			container.removeClass('is--active');
			$(thisForm).addClass('is--active');
		});
	
		// Counter
		$('.form').submit(function () { return false; });
	
		function updateCounter(element, value) {
			element
				.closest('.row')
				.find('.input-length .text')
				.text(value);
		}
	
		formInput.on('input', function () {
			var $self = $(this);
			var valCounted = $self.val().length;
	
			updateCounter($self, valCounted);
		});
	
		// Action buttons
		var btnClear = $('.button-clear');
		var btnPreview = $('.button-preview');
		var btnCopy = $('.button-copy');
	
		function render (labelField, textField) {
			return labelField + ': ' + textField;
		}
	
		function copyToClipboard(copyFrom) {
	
			document.addEventListener('copy', function(e){
				e.preventDefault();
	
				if ( e.clipboardData ) {
					e.clipboardData.setData("text/plain", copyFrom);
					// console.log(e.clipboardData.getData('text'));
				}
			});
	
			document.execCommand('copy');
		}
	
		btnClear.click(function (e) {
			e.preventDefault();
	
			var formContext = $(this).closest('.content-container');
	
			formContext.find(formInput).val('');
			formContext.find(inputLength).text(0);
		});
	
		btnCopy.click(function (e) {
			e.preventDefault();
	
			var $self = $(this);
			var formContext = $self.closest('.content-container');
			var activeSection = '#' + $('.menu-item.is--active').text().toLocaleUpperCase();
			var inputsText = '';
	
			$.each(formContext.find('.row:not(.action-buttons)'), function (index, element) {
				var labelField = $(element).find('.input-title').text();
				var textField = $(element).find(formInput).val();
	
				inputsText += render( labelField, textField ) + '\n';
			});
	
			inputsText = '\n' + activeSection + '\n' + inputsText + '\n';
	
			copyToClipboard(inputsText);
		});
	
	});


/***/ })
/******/ ]);
//# sourceMappingURL=app.min.js.map